// Generated by CoffeeScript 1.6.3
(function() {
  var Enum, EnumError, HTTPEnum, assert, keys;

  assert = require('chai').assert;

  Enum = require('../src/enum.js').Enum;

  EnumError = require('../src/enum.js').EnumError;

  HTTPEnum = null;

  keys = {
    A: 1,
    B: "b",
    C: false
  };

  suite("Enum.js", function() {
    setup(function() {
      return HTTPEnum = Enum.extend({
        OK: 200,
        ERROR: 500
      });
    });
    suite("#make", function() {
      test("Created enum should be instance of HTTPEnum", function() {
        var OK;
        OK = HTTPEnum.make('OK');
        return assert.instanceOf(OK, HTTPEnum);
      });
      return test("Created enum should be instance of Enum", function() {
        var OK;
        OK = HTTPEnum.make('OK');
        return assert.instanceOf(OK, Enum);
      });
    });
    suite("#keyOf", function() {
      test("Should return property name if it have existing value", function() {
        return assert.isTrue(HTTPEnum.keyOf(HTTPEnum.OK) === "OK");
      });
      return test("Should return null if doesn't have value", function() {
        return assert.isNull(HTTPEnum.keyOf(123));
      });
    });
    suite("#has", function() {
      test("Should return true if have existing value", function() {
        return assert.isTrue(HTTPEnum.has(HTTPEnum.OK));
      });
      return test("Should return false if doesn't have existing value", function() {
        return assert.isFalse(HTTPEnum.has(123));
      });
    });
    suite("#values", function() {
      return test("Should return correct list of values", function() {
        var MyEnum, keysWrong;
        keysWrong = {
          A: 0,
          B: "c"
        };
        MyEnum = Enum.extend(keys);
        assert.deepEqual(MyEnum.values(), keys);
        return assert.notDeepEqual(MyEnum.values(), keysWrong);
      });
    });
    return suite("#extend", function() {
      test("Should return instance of Enum", function() {
        var TestEnum, obj;
        TestEnum = Enum.extend(keys);
        obj = new TestEnum(1);
        return assert.instanceOf(obj, Enum);
      });
      test("Should return instance of TestEnum", function() {
        var TestEnum, obj;
        TestEnum = Enum.extend(keys);
        obj = new TestEnum(1);
        return assert.instanceOf(obj, TestEnum);
      });
      test("Should save deep inheritance", function() {
        var DeeperTestEnum, TestEnum, deepObj, obj;
        TestEnum = Enum.extend(keys);
        DeeperTestEnum = TestEnum.extend(keys);
        obj = new TestEnum(1);
        deepObj = new DeeperTestEnum(1);
        assert.instanceOf(deepObj, Enum);
        assert.instanceOf(deepObj, TestEnum);
        assert.instanceOf(deepObj, DeeperTestEnum);
        return assert.notInstanceOf(obj, DeeperTestEnum);
      });
      test("Should return Enum, that have all given constants", function() {
        var TestEnum;
        TestEnum = Enum.extend(keys);
        return assert.deepEqual(TestEnum.values(), keys);
      });
      test("Should return Enum, that have all given prototype methods", function() {
        var TestEnum, obj;
        TestEnum = Enum.extend(keys, {
          callMe: function() {
            return true;
          }
        });
        obj = new TestEnum(1);
        assert.isFunction(obj.callMe);
        return assert.isTrue(obj.callMe());
      });
      return test("Should return Enum, that have all given static methods", function() {
        var TestEnum;
        TestEnum = Enum.extend({
          callMe: function() {
            return true;
          }
        });
        assert.isFunction(TestEnum.callMe);
        return assert.isTrue(TestEnum.callMe());
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=enum-test.map
*/
